definitions:
  handlers.CourseDetail:
    properties:
      classTime:
        items:
          $ref: '#/definitions/services.ScheduleTime'
        type: array
      course:
        $ref: '#/definitions/services.CourseDetail'
      department:
        $ref: '#/definitions/services.DepartmentMinimal'
      instructor:
        $ref: '#/definitions/services.InstructorByID'
      semeter:
        $ref: '#/definitions/services.SemesterData'
    type: object
  handlers.InstructorCoursesData:
    properties:
      courses:
        items:
          $ref: '#/definitions/services.InstructorCourse'
        type: array
      semester:
        $ref: '#/definitions/services.SemesterData'
    type: object
  handlers.InstructorsData:
    properties:
      instructor:
        $ref: '#/definitions/services.InstructorMinimal'
      relations:
        $ref: '#/definitions/services.InstructorRelations'
    type: object
  handlers.ScheduleData:
    properties:
      course:
        $ref: '#/definitions/services.ScheduleCourse'
      department:
        $ref: '#/definitions/services.ScheduleDepartment'
      instructor:
        $ref: '#/definitions/services.ScheduleInstructor'
      time:
        items:
          $ref: '#/definitions/services.ScheduleTimeID'
        type: array
    type: object
  handlers.UserCourseResponse:
    properties:
      course_id:
        type: integer
      id:
        type: integer
      user_id:
        type: integer
    type: object
  handlers.UserCoursesRequest:
    properties:
      courseIds:
        items:
          type: integer
        type: array
    type: object
  services.CourseDetail:
    properties:
      capacity:
        type: string
      class_type:
        type: string
      department_id:
        type: integer
      final_exam_date:
        type: string
      final_exam_time:
        type: string
      group:
        type: string
      id:
        type: integer
      instructor_id:
        type: integer
      name:
        type: string
      number:
        type: string
      semester_id:
        type: integer
      student_count:
        type: string
      time_in_week:
        type: string
      units:
        type: string
    type: object
  services.CourseMinimal:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  services.DepartmentDataResponse:
    properties:
      courses_count:
        type: integer
      id:
        type: integer
      instructors_count:
        type: integer
      name:
        type: string
    type: object
  services.DepartmentMinimal:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  services.InstructorByID:
    properties:
      field:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  services.InstructorCourse:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  services.InstructorMinimal:
    properties:
      field:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  services.InstructorRelations:
    properties:
      department_id:
        type: integer
      instructor_id:
        type: integer
      semester_id:
        type: integer
    type: object
  services.ScheduleCourse:
    properties:
      department_id:
        type: integer
      group:
        type: string
      id:
        type: integer
      instructor_id:
        type: integer
      name:
        type: string
      number:
        type: string
      semester_id:
        type: integer
      units:
        type: string
    type: object
  services.ScheduleDepartment:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  services.ScheduleInstructor:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  services.ScheduleTime:
    properties:
      day:
        type: string
      end_time:
        type: string
      room:
        type: string
      start_time:
        type: string
    type: object
  services.ScheduleTimeID:
    properties:
      course_id:
        type: integer
      day:
        type: string
      end_time:
        type: string
      room:
        type: string
      start_time:
        type: string
    type: object
  services.SemesterData:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  types.DayFoodData:
    properties:
      breakfast:
        items:
          $ref: '#/definitions/types.MealData'
        type: array
      date:
        type: string
      day:
        type: string
      dinner:
        items:
          $ref: '#/definitions/types.MealData'
        type: array
      lunch:
        items:
          $ref: '#/definitions/types.MealData'
        type: array
    type: object
  types.FoodData:
    properties:
      meals:
        items:
          $ref: '#/definitions/types.DayFoodData'
        type: array
      week:
        type: string
    type: object
  types.MealData:
    properties:
      description:
        type: string
      imageAddress:
        type: string
      name:
        type: string
      place:
        type: string
      price:
        type: string
      rating:
        format: float32
        type: number
    type: object
  utils.APIResponse:
    properties:
      data: {}
      message:
        type: string
      status:
        type: string
    type: object
info:
  contact: {}
paths:
  /admin/update/data:
    post:
      consumes:
      - multipart/form-data
      description: Accepts a JSON data file upload (admin only), parses it, and returns
        the number of records
      parameters:
      - description: Admin authentication token
        in: header
        name: X-Admin-Token
        required: true
        type: string
      - description: Data file to upload (JSON format)
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: 'Example: {\"count\": 42}'
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  additionalProperties:
                    type: integer
                  type: object
              type: object
        "400":
          description: 'Bad Request: missing or invalid file'
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: 'Unauthorized: missing or invalid admin token'
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Upload data file
      tags:
      - Admin
  /auth/google/callback:
    get:
      description: Exchanges authorization code for token, fetches Google user info,
        generates JWT, and redirects to frontend
      parameters:
      - description: OAuth state returned by Google
        in: query
        name: state
        required: true
        type: string
      - description: Authorization code returned by Google
        in: query
        name: code
        required: true
        type: string
      responses:
        "302":
          description: Redirects to frontend with JWT in query param
        "400":
          description: Code not found
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid or expired OAuth state
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Handle Google OAuth callback
      tags:
      - Auth
  /auth/google/login:
    get:
      description: Generates a Google login URL and saves a temporary OAuth state
        to prevent CSRF
      parameters:
      - default: /
        description: Redirect path after successful login
        in: query
        name: redirect
        type: string
      responses:
        "200":
          description: Returns the Google OAuth URL
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Generate Google OAuth login URL
      tags:
      - Auth
  /auth/status:
    get:
      description: Checks if the user is authenticated based on JWT (sent via Authorization
        header)
      responses:
        "200":
          description: 'Returns isAuthenticated: true/false'
          schema:
            additionalProperties:
              type: boolean
            type: object
      summary: Get authentication status
      tags:
      - Auth
  /courses/{courseId}/detail:
    get:
      description: Returns course details including instructor, department, class
        time, and semester
      parameters:
      - description: Course ID
        in: path
        name: courseId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/handlers.CourseDetail'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Get course detail
      tags:
      - courses
  /courses/semester/{semesterID}:
    get:
      description: Returns all courses for a specific semester
      parameters:
      - description: Semester ID
        in: path
        name: semesterID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/services.CourseMinimal'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Get courses by semester
      tags:
      - courses
  /courses/semester/{semesterID}/department/{departmentID}:
    get:
      description: Returns all courses for a specific semester and department
      parameters:
      - description: Semester ID
        in: path
        name: semesterID
        required: true
        type: integer
      - description: Department ID
        in: path
        name: departmentID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/services.CourseMinimal'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Get courses by semester and department
      tags:
      - courses
  /departments/:
    get:
      description: Returns all departments
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/services.DepartmentMinimal'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Get departments
      tags:
      - departments
  /departments/data:
    get:
      description: Returns all departments with additional details
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/services.DepartmentDataResponse'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Get detailed department data
      tags:
      - departments
  /food/{mealId}/image:
    patch:
      consumes:
      - multipart/form-data
      description: Updates a meal's image if provided and updates its keywords
      parameters:
      - description: Meal ID
        in: path
        name: mealId
        required: true
        type: string
      - description: New Meal Image File
        in: formData
        name: image
        type: file
      - description: Comma-separated keywords
        in: formData
        name: keywords
        type: string
      - description: Admin authentication token
        in: header
        name: X-Admin-Token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Update a meal image and keywords
      tags:
      - food
  /food/image:
    post:
      consumes:
      - multipart/form-data
      description: Uploads a meal image and saves its record to the database
      parameters:
      - description: Meal Image File
        in: formData
        name: image
        required: true
        type: file
      - description: Admin authentication token
        in: header
        name: X-Admin-Token
        required: true
        type: string
      - description: Comma-separated keywords for the image
        in: formData
        name: keywords
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Upload a meal image
      tags:
      - food
  /food/weekly:
    get:
      consumes:
      - application/json
      description: Returns the most recent week's food plan, including all days and
        their respective breakfast, lunch, and dinner meals.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/types.FoodData'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Get weekly food schedule
      tags:
      - food
  /instructors/{instructorID}/detail:
    get:
      description: Returns detailed information about an instructor
      parameters:
      - description: Instructor ID
        in: path
        name: instructorID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Get instructor detail
      tags:
      - instructors
  /instructors/courses/{instructorID}:
    get:
      description: Returns courses of an instructor per semester
      parameters:
      - description: Instructor ID
        in: path
        name: instructorID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/handlers.InstructorCoursesData'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Get instructor courses
      tags:
      - instructors
  /instructors/data:
    get:
      description: Returns instructors along with their relations
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/handlers.InstructorsData'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Get instructors data
      tags:
      - instructors
  /schedule/data:
    get:
      description: Returns schedule information including courses, instructors, times,
        and departments
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/handlers.ScheduleData'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Get schedule data
      tags:
      - schedule
  /semesters/:
    get:
      description: Returns all semesters
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/services.SemesterData'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Get semesters
      tags:
      - semesters
  /user/courses:
    post:
      consumes:
      - application/json
      description: Saves a list of course IDs for the authenticated user. If any of
        the IDs do not exist in the courses table, none are saved and the invalid
        IDs are returned.
      parameters:
      - description: Course IDs
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handlers.UserCoursesRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User courses saved successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/handlers.UserCourseResponse'
                  type: array
              type: object
        "400":
          description: Invalid course IDs
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  items:
                    type: integer
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Save user's courses
      tags:
      - user
swagger: "2.0"
